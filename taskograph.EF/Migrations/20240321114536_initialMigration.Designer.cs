// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taskograph.EF.DataAccess;

#nullable disable

namespace taskograph.EF.Migrations
{
    [DbContext(typeof(TasksContext))]
    [Migration("20240321114536_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("taskograph.Models.Tables.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Grey"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beige"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Dates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5644)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5686)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5690)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5692)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5693)
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5695)
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5697)
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5698)
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5700)
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5701)
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5703)
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5705)
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5706)
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5736)
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5738)
                        },
                        new
                        {
                            Id = 16,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5740)
                        },
                        new
                        {
                            Id = 17,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5741)
                        },
                        new
                        {
                            Id = 18,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5743)
                        },
                        new
                        {
                            Id = 19,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5744)
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5746)
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5749)
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5750)
                        },
                        new
                        {
                            Id = 23,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5752)
                        },
                        new
                        {
                            Id = 24,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5753)
                        },
                        new
                        {
                            Id = 25,
                            Created = new DateTime(2024, 3, 21, 11, 45, 35, 441, DateTimeKind.Local).AddTicks(5755)
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Durations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(1, 1, 1, 0, 1, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(1, 1, 1, 0, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(1, 1, 1, 0, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(1, 1, 1, 0, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(1, 1, 1, 0, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(1, 1, 1, 0, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(1, 1, 1, 1, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(1, 1, 1, 2, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            End = new DateTime(1, 1, 1, 3, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            End = new DateTime(1, 1, 1, 4, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            End = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            End = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            End = new DateTime(1, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            End = new DateTime(1, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            End = new DateTime(1, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            End = new DateTime(1, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            End = new DateTime(1, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            End = new DateTime(1, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            End = new DateTime(1, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            End = new DateTime(1, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            End = new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            End = new DateTime(1, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            End = new DateTime(1, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            End = new DateTime(1, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            End = new DateTime(2, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int>("DurationId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("DurationId");

                    b.HasIndex("TaskId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateId = 9,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 2,
                            DateId = 10,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 3,
                            DateId = 11,
                            Name = "FriendsAndFamily"
                        },
                        new
                        {
                            Id = 4,
                            DateId = 12,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 5,
                            DateId = 13,
                            Name = "Work"
                        },
                        new
                        {
                            Id = 6,
                            DateId = 14,
                            Name = "Hobby"
                        },
                        new
                        {
                            Id = 7,
                            DateId = 15,
                            Name = "Relaxation"
                        },
                        new
                        {
                            Id = 8,
                            DateId = 16,
                            Name = "Entertaiment"
                        },
                        new
                        {
                            Id = 9,
                            DateId = 17,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.PreciseTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("TaskId");

                    b.ToTable("PreciseTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateDue = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateId = 1,
                            Name = "Read Little Prince"
                        },
                        new
                        {
                            Id = 2,
                            DateDue = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateId = 2,
                            Name = "Run 10 km"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "What you have to do today is insignificant, but is very important that you do it."
                        },
                        new
                        {
                            Id = 2,
                            Name = "It's about the marathon, not the sprint."
                        },
                        new
                        {
                            Id = 3,
                            Name = "Don't feel bad because you don't know something and feel like you can't do anything. Do what you can do and then improve."
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.RegularTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int>("PerTimeframeDurationId")
                        .HasColumnType("int");

                    b.Property<int>("TargetDurationId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("PerTimeframeDurationId");

                    b.HasIndex("TargetDurationId");

                    b.HasIndex("TaskId");

                    b.ToTable("RegularTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateId = 3,
                            PerTimeframeDurationId = 13,
                            TargetDurationId = 3,
                            TaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateId = 4,
                            PerTimeframeDurationId = 14,
                            TargetDurationId = 4,
                            TaskId = 2
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Setting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AlarmClock",
                            Value = "Off"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateId = 5,
                            GroupId = 4,
                            Name = "Running"
                        },
                        new
                        {
                            Id = 2,
                            DateId = 6,
                            GroupId = 2,
                            Name = "Reading"
                        },
                        new
                        {
                            Id = 3,
                            DateId = 7,
                            GroupId = 1,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 4,
                            DateId = 8,
                            GroupId = 7,
                            Name = "Dancing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("taskograph.Models.Tables.Entry", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Date", "Date")
                        .WithOne("Entry")
                        .HasForeignKey("taskograph.Models.Tables.Entry", "DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Duration", "Duration")
                        .WithMany("Entries")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("Entries")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Date");

                    b.Navigation("Duration");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Color", "Color")
                        .WithMany("Groups")
                        .HasForeignKey("ColorId");

                    b.HasOne("taskograph.Models.Tables.Date", "Date")
                        .WithOne("Group")
                        .HasForeignKey("taskograph.Models.Tables.Group", "DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Date");
                });

            modelBuilder.Entity("taskograph.Models.Tables.PreciseTarget", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Date", "Date")
                        .WithOne("PreciseTarges")
                        .HasForeignKey("taskograph.Models.Tables.PreciseTarget", "DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("PreciseTargets")
                        .HasForeignKey("TaskId");

                    b.Navigation("Date");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.RegularTarget", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Date", "Date")
                        .WithOne("RegularTarget")
                        .HasForeignKey("taskograph.Models.Tables.RegularTarget", "DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Duration", "PerTimeframeDuration")
                        .WithMany("PerTimeframeRegularTargets")
                        .HasForeignKey("PerTimeframeDurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Duration", "TargetDuration")
                        .WithMany("TargetRegularTargets")
                        .HasForeignKey("TargetDurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("RegularTargets")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Date");

                    b.Navigation("PerTimeframeDuration");

                    b.Navigation("TargetDuration");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Color", "Color")
                        .WithMany("Tasks")
                        .HasForeignKey("ColorId");

                    b.HasOne("taskograph.Models.Tables.Date", "Date")
                        .WithOne("Tasks")
                        .HasForeignKey("taskograph.Models.Tables.Task", "DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId");

                    b.Navigation("Color");

                    b.Navigation("Date");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Color", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Date", b =>
                {
                    b.Navigation("Entry")
                        .IsRequired();

                    b.Navigation("Group")
                        .IsRequired();

                    b.Navigation("PreciseTarges")
                        .IsRequired();

                    b.Navigation("RegularTarget")
                        .IsRequired();

                    b.Navigation("Tasks")
                        .IsRequired();
                });

            modelBuilder.Entity("taskograph.Models.Tables.Duration", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("PerTimeframeRegularTargets");

                    b.Navigation("TargetRegularTargets");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("PreciseTargets");

                    b.Navigation("RegularTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
