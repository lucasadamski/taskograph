// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taskograph.EF.DataAccess;

#nullable disable

namespace taskograph.EF.Migrations
{
    [DbContext(typeof(TasksContext))]
    [Migration("20240903205720_new_2")]
    partial class new_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("taskograph.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "none",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89d24605-fc04-4b2a-bece-a23f5a5f18eb",
                            EmailConfirmed = false,
                            FirstName = "none",
                            LastName = "none",
                            LockoutEnabled = false,
                            NormalizedUserName = "NONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEN/R+KwoPgMOAvw6OT03yt0hGm0mZ4O760W6Phtj6w/zZ13YyYfs5Caeb9P3bv5Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0ba9919-d23b-4f6c-8005-40b80c950626",
                            TwoFactorEnabled = false,
                            UserName = "none"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Grey"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beige"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ColorId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Health"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Education"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "FriendsAndFamily"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Work"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Hobby"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Relaxation"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Entertaiment"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.PreciseTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("PreciseTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DateDue = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Read Little Prince",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DateDue = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Run 10 km",
                            TaskId = 2
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "none",
                            Name = "What you have to do today is insignificant, but is very important that you do it."
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "none",
                            Name = "It's about the marathon, not the sprint."
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "none",
                            Name = "Don't feel bad because you don't know something and feel like you can't do anything. Do what you can do and then improve."
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.RegularTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("RegularTimeIntervalToAchieveTarget")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<long>("TimeDedicatedToPerformTarget")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("RegularTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RegularTimeIntervalToAchieveTarget = 60L,
                            TaskId = 1,
                            TimeDedicatedToPerformTarget = 10L
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RegularTimeIntervalToAchieveTarget = 60L,
                            TaskId = 2,
                            TimeDedicatedToPerformTarget = 5L
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "none",
                            Name = "AlarmClock",
                            Value = "Off"
                        });
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            GroupId = 4,
                            Name = "Running"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            GroupId = 2,
                            Name = "Reading"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            GroupId = 1,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "none",
                            Created = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            GroupId = 7,
                            Name = "Dancing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskograph.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("taskograph.Models.Tables.Entry", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("Entries")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Groups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Color", "Color")
                        .WithMany("Groups")
                        .HasForeignKey("ColorId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("taskograph.Models.Tables.PreciseTarget", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("PreciseTargets")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Quote", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Quotes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("taskograph.Models.Tables.RegularTarget", b =>
                {
                    b.HasOne("taskograph.Models.Tables.Task", "Task")
                        .WithMany("RegularTargets")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Setting", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Settings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.HasOne("taskograph.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Tasks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskograph.Models.Tables.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("taskograph.Models.ApplicationUser", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Quotes");

                    b.Navigation("Settings");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Color", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Group", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("taskograph.Models.Tables.Task", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("PreciseTargets");

                    b.Navigation("RegularTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
